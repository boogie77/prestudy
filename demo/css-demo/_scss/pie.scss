@charset "UTF-8";
/*
@styleguide
# 先画一个圆（或者可以说是显示0%比例的饼图）

<div class="pie1"></div>

    <div class="pie1"></div>

*/
.pie1 {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: yellowgreen;
}

/*
@styleguide

# 用一个简单的线性渐变给右半圆着棕色
我们的饼图是绿色（特指 yellowgreen ）和棕色（ #655 ）显示的百分比。可能会在比例部分尝试使用 transform 中的 skew ，但是经过几次试验之后表明，这是一个非常混乱的方案。因此，我们用这两种颜色为这个饼图的左右部分分别着色，然后对于我们想要的百分比，使用旋转的伪元素来实现。

我们使用一个简单的线性渐变，给右半部分着棕色：

<div class="pie2"></div>

    <div class="pie2"></div>

*/
.pie2 {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: yellowgreen;
  background-image: linear-gradient(to right, transparent 50%, #655 0);
}

/*
@styleguide

# 虚线内的内容表示伪元素将作为蒙版的区域

<div class="pie3"></div>

    <div class="pie3"></div>

*/
.pie3 {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: yellowgreen;
  background-image: linear-gradient(to right, transparent 50%, #655 0);
}
.pie3::before {
  content: '';
  display: block;
  margin-left: 50%;
  height: 100%;
}

/*
@styleguide

# 添加样式之后的伪元素（这里用虚线表示）

<div class="pie4"></div>

    <div class="pie4"></div>

*/
.pie4 {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: yellowgreen;
  background-image: linear-gradient(to right, transparent 50%, #655 0);
}
.pie4::before {
  content: '';
  display: block;
  margin-left: 50%;
  height: 100%;
  border-radius: 0 100% 100% 0 / 50%;
  background-color: inherit;
  transform-origin: left;
}

/*
@styleguide

# 分别展示不同百分比的饼图，从左到右： 10%  ( 36deg 或 .1turn ), 20%  ( 72deg 或  .2turn ), 40%  ( 144deg  或 .4turn )

对于超过50%的比例，我们的饼图就跪了orz（这里的是60%）

<div class="pie5"></div>
<div class="pie6"></div>
<div class="pie7"></div>
<div class="pie8"></div>

    <div class="pie5"></div>
    <div class="pie6"></div>
    <div class="pie7"></div>
    <div class="pie8"></div>

*/
.pie5 {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: yellowgreen;
  background-image: linear-gradient(to right, transparent 50%, #655 0);
}
.pie5::before {
  content: '';
  display: block;
  margin-left: 50%;
  height: 100%;
  border-radius: 0 100% 100% 0 / 50%;
  background-color: inherit;
  transform-origin: left;
  transform: rotate(.1turn);
}
.pie6 {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: yellowgreen;
  background-image: linear-gradient(to right, transparent 50%, #655 0);
}
.pie6::before {
  content: '';
  display: block;
  margin-left: 50%;
  height: 100%;
  border-radius: 0 100% 100% 0 / 50%;
  background-color: inherit;
  transform-origin: left;
  transform: rotate(.2turn);
}
.pie7 {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: yellowgreen;
  background-image: linear-gradient(to right, transparent 50%, #655 0);
}
.pie7::before {
  content: '';
  display: block;
  margin-left: 50%;
  height: 100%;
  border-radius: 0 100% 100% 0 / 50%;
  background-color: inherit;
  transform-origin: left;
  transform: rotate(.4turn);
}
.pie8 {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: yellowgreen;
  background-image: linear-gradient(to right, transparent 50%, #655 0);
}
.pie8::before {
  content: '';
  display: block;
  margin-left: 50%;
  height: 100%;
  border-radius: 0 100% 100% 0 / 50%;
  background-color: inherit;
  transform-origin: left;
  transform: rotate(.6turn);
}

/*
@styleguide

# 60% 饼图的正确打开方式~

如果我们把 50%-100% 比例的情况作为单独的一个问题，可能会注意到可以使用之前的解决方案的反相版本：从0到.5turn旋转的棕色伪元素。所以，对于一个60%的饼图，伪元素的CSS代码如下：

<div class="pie9"></div>

    <div class="pie9"></div>

*/
.pie9 {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: yellowgreen;
  background-image: linear-gradient(to right, transparent 50%, #655 0);
}
.pie9::before {
  content: '';
  display: block;
  margin-left: 50%;
  height: 100%;
  border-radius: 0 100% 100% 0 / 50%;
  background: #655;
  transform-origin: left;
  transform: rotate(.1turn);
}

/*
@styleguide

# 为饼图从0%到100%添加动画效果，创建出一个有趣的进度条

<div class="pie"></div>

    <div class="pie"></div>

*/
.pie {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: yellowgreen;
  background-image: linear-gradient(to right, transparent 50%, currentColor 0);
  color: #655;
  margin: 50px auto;
}
.pie::before {
  content: '';
  display: block;
  margin-left: 50%;
  height: 100%;
  border-radius: 0 100% 100% 0 / 50%;
  background-color: inherit;
  transform-origin: left;
  animation: spin 3s linear infinite, bg 6s step-end infinite;
}
@keyframes spin {
  to {
    transform: rotate(.5turn);
  }
}
@keyframes bg {
  50% {
    background: currentColor;
  }
}
