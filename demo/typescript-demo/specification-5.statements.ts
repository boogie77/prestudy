// 5  Statements// This chapter describes the static type checking TypeScript provides for JavaScript statements.// TypeScript itself does not introduce any new statement constructs.// 5.1  Variable Statements// 5.1.1  Simple Variable Declarationsvar a511;                          // anyvar b511: number;                  // numbervar c511 = 1;                      // numbervar d511 = { x: 1, y: "hello" };   // { x: number; y: string; }var e511: any = "test";            // anyvar x511 = 1;var x511: number;if (x511 == 1) {    var x511 = 2;}interface Point5110 { x: number; y: number; }var a5110 = { x: 0, y: <number> undefined };var b5110: Point5110 = { x: 0, y: undefined };var c5110 = <Point5110> { x: 0, y: undefined };var d5110: { x: number; y: number; } = { x: 0, y: undefined };var e5110 = <{ x: number; y: number; }> { x: 0, y: undefined };// 5.1.2  Destructuring Variable Declarationsdeclare var getSomeObject;var { x5120, p5120: y5120, q5120: z5120 = false } = getSomeObject();declare var getSomeArray;var [x5121, y5121, z5121 = 10] = getSomeArray();var { x5122, p5122: [y5122, z5122 = 10] = getSomeArray() } = getSomeObject();// 5.1.3  Implied Typefunction f513({ a, b = "hello", c = 1 }) { }var [a513, b513, c513] = [1, "hello", true];// 5.2  If, Do, and While Statements// 5.3  For Statements// 5.4  For-In Statements// 5.5  Continue Statements// 5.6  Break Statements// 5.7  Return Statementsfunction f57(): (x: string) => number {  return s => s.length;}// 5.8  With Statements// 5.9  Switch Statements// 5.10  Throw Statements// 5.11  Try Statements