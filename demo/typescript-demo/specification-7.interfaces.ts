// 7  Interfaces// Interfaces provide the ability to name and parameterize object types and// to compose existing named object types into new ones.// 7.1  Interface Declarationsinterface Mover {  move(): void;  getStatus(): { speed: number; };}interface Shaker {  shake(): void;  getStatus(): { frequency: number; };}interface MoverShaker extends Mover, Shaker {  getStatus(): { speed: number; frequency: number; };}interface StringComparer { (a: string, b: string): number; }// 7.2  Declaration Merginginterface Document {  createElement(tagName: any): Element;}interface Document {  createElement(tagName: string): HTMLElement;}interface Document {  createElement(tagName: "div"): HTMLDivElement;  createElement(tagName: "span"): HTMLSpanElement;  createElement(tagName: "canvas"): HTMLCanvasElement;}// Note that the members of the last interface declaration appear first in the merged declaration.// Also note that the relative order of members declared in the same interface body is preserved.interface Document {  createElement(tagName: "div"): HTMLDivElement;  createElement(tagName: "span"): HTMLSpanElement;  createElement(tagName: "canvas"): HTMLCanvasElement;  createElement(tagName: string): HTMLElement;  createElement(tagName: any): Element;}// 7.3  Interfaces Extending Classesclass Control73 {  private state: any;}interface SelectableControl73 extends Control73 {  select(): void;}class Button73 extends Control73 {  select() { }}class TextBox73 extends Control73 {  select() { }}class Image73 extends Control73 {}class Location73 {  select() { }}// 7.4  Dynamic Type Checksvar obj: any = getSomeObject();if (obj && obj.move && obj.shake && obj.getStatus) {  var moverShaker = <MoverShaker> obj;}function asMoverShaker(obj: any): MoverShaker {  return obj && obj.move && obj.shake && obj.getStatus ? obj : null; }