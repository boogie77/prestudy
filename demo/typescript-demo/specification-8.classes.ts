// 8  Classes// TypeScript supports classes that are closely aligned with those proposed for ECMAScript 6,// and includes extensions for instance and static member declarations and properties declared// and initialized from constructor parameters.// 8.1  Class Declarationsclass Point81 {  constructor(public x: number, public y: number) { }  public length() { return Math.sqrt(this.x * this.x + this.y * this.y); }  static origin = new Point81(0, 0);}interface Point811 {  x: number;  y: number;  length(): number;}var Point811: {  new(x: number, y: number): Point811;  origin: Point811;};var p: Point811 = new Point811(10, 20);// 8.1.1  Class Heritage Specificationclass A811 { a: number; }module Foo811 {    var A811 = 1;    // class B811 extends A811 { b: string; }  // **"Red"**Error}// 8.1.2  Class Body// 8.2  Members// 8.2.1  Instance and Static Members// 8.2.2  Accessibilityclass A822 {  private x: number;  protected y: number;  static f(a: A822, b: B822) {    a.x = 1;  // Ok    b.x = 1;  // Ok    a.y = 1;  // Ok    b.y = 1;  // Ok  }}class B822 extends A822 {  static f(a: A822, b: B822) {    // a.x = 1;  // **"Red"**Error, x only accessible within A    // b.x = 1;  // **"Red"**Error, x only accessible within A    // a.y = 1;  // **"Red"**Error, y must be accessed through instance of B    b.y = 1;  // Ok  }}// 8.2.3  Inheritance and Overriding// 8.2.4  Class Typesclass A824 {  public x: number;  public f() { }  public g(a: any) { return undefined; }  static s: string;}class B824 extends A824 {  public y: number;  public g(b: boolean) { return false; }}interface A8241 {  x: number;  f: () => void;  g: (a: any) => any;}interface B8241 {  x: number;  y: number;  f: () => void;  g: (b: boolean) => boolean;}// 8.2.5  Constructor Function Typesclass Pair825<T1, T2> {  constructor(public item1: T1, public item2: T2) { }}class TwoArrays825<T> extends Pair825<T[], T[]> { }interface Pair8250<T1, T2> {  item1: T1;  item2: T2;}interface TwoArrays8250<T> {  item1: T[];  item2: T[];}var Pair8251: {  new <T1, T2>(item1: T1, item2: T2): Pair8250<T1, T2>;}var TwoArrays8251: {  new <T>(item1: T[], item2: T[]): TwoArrays8250<T>;}// 8.3  Constructor Declarations// 8.3.1  Constructor Parametersclass Point831 {  constructor(public x: number, public y: number) {    // Constructor body  }}class Point8310 {  public x: number;  public y: number;  constructor(x: number, y: number) {    this.x = x;    this.y = y;    // Constructor body  }}// 8.3.2  Super Callsclass ColoredPoint extends Point831 {  constructor(x: number, y: number, public color: string) {    super(x, y);  }}// 8.3.3  Automatic Constructors// BaseClass.apply(this, arguments);// 8.4  Property Member Declarationsclass Point84 {  constructor(public x: number, public y: number) { }  public distance(p: Point84) {    var dx = this.x - p.x;    var dy = this.y - p.y;    return Math.sqrt(dx * dx + dy * dy);  }  static origin = new Point84(0, 0);  static distance(p1: Point84, p2: Point84) { return p1.distance(p2); }}interface Point840 {  x: number;  y: number;  distance(p: Point840);}var Point841: {  new(x: number, y: number): Point840;  origin: Point840;  distance(p1: Point840, p2: Point840): number;}// 8.4.1  Member Variable Declarationsclass Employee841 {  public name: string;  public address: string;  public retired = false;  public manager: Employee841 = null;  public reports: Employee841[] = [];}class Employee8410 {  public name: string;  public address: string;  public retired: boolean;  public manager: Employee8410;  public reports: Employee8410[];  constructor() {    this.retired = false;    this.manager = null;    this.reports = [];  }}// 8.4.2  Member Function Declarationsclass Point842 {  constructor(public x: number, public y: number) { }  public toString() {    return "x=" + this.x + " y=" + this.y;  }}class ColoredPoint842 extends Point842 {  constructor(x: number, y: number, public color: string) {    super(x, y);  }  public toString() {    return super.toString() + " color=" + this.color;  }}class A842 {  a = 1;  static create() {    return new this();  }}class B842 extends A842 {  b = 2;}var x842 = A842.create();  // new A()var y842 = B842.create();  // new B()class B843 extends A842 {  constructor(public b: number) {    super();  }}// 8.4.3  Member Accessor Declarations// 8.5  Index Member Declarations// 8.6  Code Generation// 8.6.1  Classes Without Extends Clauses// Object.defineProperty(<ClassName>.prototype, "<MemberName>", {//     get: function () {//         <GetAccessorStatements>//     },//     set: function (<ParameterName>) {//         <SetAccessorStatements>//     },//     enumerable: true,//     configurable: true// };// Object.defineProperty(<ClassName>, "<MemberName>", {//     get: function () {//         <GetAccessorStatements>//     },//     set: function (<ParameterName>) {//         <SetAccessorStatements>//     },//     enumerable: true,//     configurable: true// };// 8.6.2  Classes With Extends Clausesvar __extends = this.__extends || function(d, b) {  for (var p in b) {    if (b.hasOwnProperty(p)) {      d[p] = b[p];    }  }   function f() { this.constructor = d; }  f.prototype = b.prototype;  d.prototype = new f();}