// 2 Basic Concepts --------------------------------// The remainder of this document is the formal specification of the TypeScript programming language// and is intended to be read as an adjunct to the ECMAScript Language Specification// (specifically, the ECMA-262 Standard, 5th Edition).// This document describes the syntactic grammar added by TypeScript along with// the compile-time processing and type checking performed by the TypeScript compiler,// but it only minimally discusses the run-time behavior of programs since// that is covered by the ECMAScript specification.// 2.1  Grammar Conventions// The syntactic grammar added by TypeScript language is specified throughout// this document using the existing conventions and production names of the ECMAScript grammar.// In places where TypeScript augments an existing grammar production it is so noted.// 2.2  Namespaces and Named Types// TypeScript supports named types that can be organized in hierarchical namespaces.// Namespaces are introduced by module declarations and named types are// introduced by class, interface, and enum declarations.// Named types are denoted by qualified names that extend from some root module// (possibly the global module) to the point of their declaration.module X {  export module Y {    export interface Z { }  }  export interface Y { }}// declares two interface types with the qualified names 'X.Y.Z' and 'X.Y'// relative to the root module in which 'X' is declared.module A1 {  export module B1 {    export class C1 { }  }}// introduces a named type with the qualified name 'A.B.C'// and also introduces a constructo can be accessed using the expression 'A.B.C'.var c1111: A1.B1.C1 = new A1.B1.C1();// 2.3  Declarations// Declarations introduce names in the declaration spaces to which they belong.// It is an error to have two names with same spelling in the same declaration space.// module M11 {//   module X11 { ... }      // Namespace//   interface X11 { ... }   // Type//   var X;                // Member// }// class C {//   x: number;          // Instance member//   static x: string;   // Static member// }// 2.4  Scopes// The scope of a name is the region of program text within which it is possible// to refer to the entity declared by that name without qualification of the name.// The scope of a name depends on the context in which the name is declared.var x = 1;module M {  export var x = 2;  console.log(x);     // 2}module M {  console.log(x);     // 2}module M {  var x = 3;  console.log(x);     // 3 }