// 6  Functions// TypeScript extends JavaScript functions to include type parameters, parameter// and return type annotations, overloads, default parameter values, and rest parameters.// 6.1  Function Declarations// 6.2  Function Overloadsclass Accessor{}function attr(name: string): string;function attr(name: string, value: string): Accessor;function attr(map: any): Accessor;function attr(nameOrMap: any, value?: string): any {  if (nameOrMap && typeof nameOrMap === "string") {    // handle string case  }  else {    // handle map case  }}// 6.3  Function Implementationsfunction f63(x: number) {  if (x <= 0) {    return x;  }  return g63(x);}function g63(x: number) {  return f63(x - 1);}function strange(x: number, y = x * 2, z = x + y) {  return z;}var x630 = 1;function f630(a = x630) {  var x = "hello";}// 6.4  Destructuring Parameter Declarationsfunction drawText640({ text = "", location: [x, y] = [0, 0], bold = false }) {  // Draw text}interface DrawTextInfo641 {  text?: string;  location?: [number, number];  bold?: boolean;}function drawText641({ text, location: [x, y], bold }: DrawTextInfo641) {  // Draw text}// 6.5  Generic Functionsinterface Comparable {  localeCompare(other: any): number;}function compare<T extends Comparable>(x: T, y: T): number {  if (x == null) {    return y == null ? 0 : -1;  }  if (y == null) {    return 1;  }  return x.localeCompare(y);}class Person65 {  name: string;  localeCompare(other: Person65) {    return compare(this.name, other.name);  }}// 6.6  Code Generation// if (<Parameter> === void 0) { <Parameter> = <Default>; } 