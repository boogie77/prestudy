// 10 Internal Modules// An internal module is a named container of statements and declarations.// An internal module represents both a namespace and a singleton module instance.// The namespace contains named types and other namespaces,// and the singleton module instance contains properties for the module's exported members.// The body of an internal module corresponds to a function that is executed once,// thereby providing a mechanism for maintaining local state with assured isolation.// 10.1  Module Declarations// An internal module declaration declares a namespace name and,// in the case of an instantiated module, a member name in the containing module.module M {  export interface P { x: number; y: number; }  export var a = 1;}var p: M.P;             // M used as ModuleNamevar m = M;              // M used as PrimaryExpressionvar x1 = M.a;           // M used as PrimaryExpressionvar x2 = m.a;           // Same as M.a// var q: m.P;             // Errormodule A101.B101.C101 {  export var x = 1;}// corresponds tomodule A101 {  export module B101 {    export module C101 {      export var x = 1;    }  }}// 10.2  Module Body// 10.3  Import Declarationsmodule A103 {  export interface X { s: string }  export var X: X;}module B103 {  interface A103 { n: number }  import Y = A103;    // Alias only for module A  import Z = A103.X;  // Alias for both type and member A.X  var v: Z = Z;}module A1031 {  export interface X { s: string }}module B1031 {  var A1031 = 1;  import Y = A1031;}// 10.4 Export Declarationsinterface A104 { x: string; }module M104 {  export interface B104 { x: A104; }  export interface C104 { x: B104; }  export function foo(c: C104) {  }}// 10.5  Declaration Mergingmodule outer {  var local = 1;           // Non-exported local variable  export var a = local;    // outer.a  export module inner {    export var x = 10;   // outer.inner.x  }}module outer {  var local = 2;           // Non-exported local variable  export var b = local;    // outer.b  export module inner {    export var y = 20;   // outer.inner.y  }}//  the instance type of which will be:// {//     a: number;//     b: number;//     inner: {//         x: number;//         y: number;//     };// }interface Point105 {  x: number;  y: number;}function point105(x: number, y: number): Point105 {  return { x: x, y: y };}module point105 {  export var origin = point105(0, 0);  export function equals(p1: Point105, p2: Point105) {    return p1.x == p2.x && p1.y == p2.y;  }}var p1 = point105(0, 0);var p2 = point105.origin;var b = point105.equals(p1, p2);// 10.6  Code Generation// 11 Source Files and External Modules -----------------------------// TypeScript implements external modules that are closely aligned with those proposed// for ECMAScript 6 and supports code generation targeting CommonJS and AMD module systems.// 11.1  Source Files// A TypeScript program consists of one or more source files that are either implementation// source files or declaration source files.// Source files with extension '.ts' are ImplementationSourceFiles containing statements// and declarations. Source files with extension '.d.ts' are DeclarationSourceFiles// containing declarations only.// Declaration source files are a strict subset of implementation source files.// 11.1.1  Source Files Dependencies// The TypeScript compiler automatically determines a source file's dependencies// and includes those dependencies in the program being compiled.// 11.2  External Modules// External modules are separately loaded bodies of code referenced using external module names.// External modules can be likened to functions that are loaded and executed once to// initialize their associated module instance.// Entities declared in an external module are private and inaccessible elsewhere// unless they are exported.// File main.ts:// import log = require("./log");// log.message("hello");// File log.ts:// export function message(s: string) {//   console.log(s);// }// 11.2.1  External Module Names// External modules are identified and referenced using external module names.// The following definition is aligned with that provided in the CommonJS Modules 1.0 specification.// 11.2.2  External Import Declarations// 11.2.3  Export Declarations// 11.2.4  Export Assignmentsexport = Point1124;class Point1124 {  constructor(public x: number, public y: number) { }  static origin = new Point1124(0, 0);}//// import Pt = require("./point");// var p1 = new Pt(10, 20);// var p2 = Pt.origin;// 11.2.5  CommonJS Modules// An example:// File geometry.ts:// export interface Point { x: number; y: number };// export function point(x: number, y: number): Point {//     return { x: x, y: y };// }// File game.ts:// import g = require("./geometry");// var p = g.point(10, 20);// var g = require("./geometry");// var p = g.point(10, 20);// import g = require("./geometry");// var p: g.Point = { x: 10, y: 20 };// 11.2.6  AMD Modules// The "main" and "log" example from above generates the following JavaScript code// when compiled for the AMD pattern.// File main.js:// define(["require", "exports", "./log"], function(require, exports, log) {//     log.message("hello");// }// File log.js:// define(["require", "exports"], function(require, exports) {//     exports.message = function(s) {//         console.log(s);//     }// }// 12 Ambients// 12.1  Ambient Declarations// 12.1.1  Ambient Variable Declarations// 12.1.2  Ambient Function Declarations// 12.1.3  Ambient Class Declarations// 12.1.4  Ambient Enum Declarations// 12.1.5  Ambient Module Declarations// 12.2  Ambient External Module Declarations// declare module "io" {//   export function readFile(filename: string): string;// }// declare module "io" {//   export function writeFile(filename: string, data: string): void;// }// declare module "io" { //   export function readFile(filename: string): string;//   export function writeFile(filename: string, data: string): void;// }