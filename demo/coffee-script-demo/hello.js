// Generated by CoffeeScript 1.9.3
(function() {
  var Account, Animal, Horse, OPERATOR, Person, Snake, age, ages, author, awardMedals, bitlist, changeNumbers, child, cholesterol, city, close, contenders, contents, copy, countdown, courses, cube, cubes, date, dish, eldest, end, error, evens, filename, fill, first, fn, food, foods, footprints, forecast, fs, futurists, globals, gold, grade, healthy, hi, html, i, inner, j, k, kids, l, last, len, len1, len2, len3, list, lyrics, m, math, middle, mobyDick, mood, n, name, num, number, numbers, one, open, opposite, outer, quote, race, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, rest, sam, score, sentence, shortNames, silver, singers, six, solipsism, song, speed, square, start, street, tag, temp, text, theBait, theSwitch, three, tim, tom, two, volume, weatherReport, winner, x, yearsOld, zip,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  number = 42;

  opposite = true;

  if (opposite) {
    number = -42;
  }

  square = function(x) {
    return x * x;
  };

  list = [1, 2, 3, 4, 5];

  math = {
    root: Math.sqrt,
    square: square,
    cube: function(x) {
      return x * square(x);
    }
  };

  race = function() {
    var runners, winner;
    winner = arguments[0], runners = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    return print(winner, runners);
  };

  if (typeof elvis !== "undefined" && elvis !== null) {
    console.log("I knew it!");
  }

  cubes = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = list.length; j < len; j++) {
      num = list[j];
      results.push(math.cube(num));
    }
    return results;
  })();

  console.log(sys.inspect(object));

  square = function(x) {
    return x * x;
  };

  cube = function(x) {
    return square(x) * x;
  };

  fill = function(container, liquid) {
    if (liquid == null) {
      liquid = "coffee";
    }
    return "Filling the " + container + " with " + liquid + "...";
  };

  song = ["do", "re", "mi", "fa", "so"];

  singers = {
    Jagger: "Rock",
    Elvis: "Roll"
  };

  bitlist = [1, 0, 1, 0, 0, 1, 1, 1, 0];

  kids = {
    brother: {
      name: "Max",
      age: 11
    },
    sister: {
      name: "Ida",
      age: 9
    }
  };

  $('.account').attr({
    "class": 'active'
  });

  console.log(object["class"]);

  outer = 1;

  changeNumbers = function() {
    var inner;
    inner = -1;
    return outer = 10;
  };

  inner = changeNumbers();

  if (singing) {
    mood = greatlyImproved;
  }

  if (happy && knowsIt) {
    clapsHands();
    chaChaCha();
  } else {
    showIt();
  }

  date = friday ? sue : jill;

  gold = silver = rest = "unknown";

  awardMedals = function() {
    var first, others, second;
    first = arguments[0], second = arguments[1], others = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    gold = first;
    silver = second;
    return rest = others;
  };

  contenders = ["Michael Phelps", "Liu Xiang", "Yao Ming", "Allyson Felix", "Shawn Johnson", "Roman Sebrle", "Guo Jingjing", "Tyson Gay", "Asafa Powell", "Usain Bolt"];

  awardMedals.apply(null, contenders);

  alert("Gold: " + gold);

  alert("Silver: " + silver);

  alert("The Field: " + rest);

  ref = ['toast', 'cheese', 'wine'];
  for (j = 0, len = ref.length; j < len; j++) {
    food = ref[j];
    eat(food);
  }

  courses = ['greens', 'caviar', 'truffles', 'roast', 'cake'];

  for (i = k = 0, len1 = courses.length; k < len1; i = ++k) {
    dish = courses[i];
    menu(i + 1, dish);
  }

  foods = ['broccoli', 'spinach', 'chocolate'];

  for (l = 0, len2 = foods.length; l < len2; l++) {
    food = foods[l];
    if (food !== 'chocolate') {
      eat(food);
    }
  }

  shortNames = (function() {
    var len3, m, results;
    results = [];
    for (m = 0, len3 = list.length; m < len3; m++) {
      name = list[m];
      if (name.length < 5) {
        results.push(name);
      }
    }
    return results;
  })();

  countdown = (function() {
    var m, results;
    results = [];
    for (num = m = 10; m >= 1; num = --m) {
      results.push(num);
    }
    return results;
  })();

  evens = (function() {
    var m, results;
    results = [];
    for (x = m = 0; m <= 10; x = m += 2) {
      results.push(x);
    }
    return results;
  })();

  yearsOld = {
    max: 10,
    ida: 9,
    tim: 11
  };

  ages = (function() {
    var results;
    results = [];
    for (child in yearsOld) {
      age = yearsOld[child];
      results.push(child + " is " + age);
    }
    return results;
  })();

  if (this.studyingEconomics) {
    while (supply > demand) {
      buy();
    }
    while (!(supply > demand)) {
      sell();
    }
  }

  num = 6;

  lyrics = (function() {
    var results;
    results = [];
    while (num -= 1) {
      results.push(num + " little monkeys, jumping on the bed. One fell out and bumped his head.");
    }
    return results;
  })();

  fn = function(filename) {
    return fs.readFile(filename, function(err, contents) {
      return compile(filename, contents.toString());
    });
  };
  for (m = 0, len3 = list.length; m < len3; m++) {
    filename = list[m];
    fn(filename);
  }

  numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];

  start = numbers.slice(0, 3);

  middle = numbers.slice(3, -2);

  end = numbers.slice(-2);

  copy = numbers.slice(0);

  numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

  [].splice.apply(numbers, [3, 4].concat(ref1 = [-3, -4, -5, -6])), ref1;

  grade = function(student) {
    if (student.excellentWork) {
      return "A+";
    } else if (student.okayStuff) {
      if (student.triedHard) {
        return "B";
      } else {
        return "B-";
      }
    } else {
      return "C";
    }
  };

  eldest = 24 > 21 ? "Liz" : "Ike";

  six = (one = 1) + (two = 2) + (three = 3);

  globals = ((function() {
    var results;
    results = [];
    for (name in window) {
      results.push(name);
    }
    return results;
  })()).slice(0, 10);

  alert((function() {
    try {
      return nonexistent / void 0;
    } catch (_error) {
      error = _error;
      return "And the error is ... " + error;
    }
  })());

  if (ignition === true) {
    launch();
  }

  if (band !== SpinalTap) {
    volume = 10;
  }

  if (answer !== false) {
    letTheWildRumpusBegin();
  }

  if (car.speed < limit) {
    accelerate();
  }

  if (pick === 47 || pick === 92 || pick === 13) {
    winner = true;
  }

  print(inspect("My name is " + this.name));

  if ((typeof mind !== "undefined" && mind !== null) && (typeof world === "undefined" || world === null)) {
    solipsism = true;
  }

  speed = 0;

  if (speed == null) {
    speed = 15;
  }

  footprints = typeof yeti !== "undefined" && yeti !== null ? yeti : "bear";

  zip = typeof lottery.drawWinner === "function" ? (ref2 = lottery.drawWinner().address) != null ? ref2.zipcode : void 0 : void 0;

  Animal = (function() {
    function Animal(name1) {
      this.name = name1;
    }

    Animal.prototype.move = function(meters) {
      return alert(this.name + (" moved " + meters + "m."));
    };

    return Animal;

  })();

  Snake = (function(superClass) {
    extend(Snake, superClass);

    function Snake() {
      return Snake.__super__.constructor.apply(this, arguments);
    }

    Snake.prototype.move = function() {
      alert("Slithering...");
      return Snake.__super__.move.call(this, 5);
    };

    return Snake;

  })(Animal);

  Horse = (function(superClass) {
    extend(Horse, superClass);

    function Horse() {
      return Horse.__super__.constructor.apply(this, arguments);
    }

    Horse.prototype.move = function() {
      alert("Galloping...");
      return Horse.__super__.move.call(this, 45);
    };

    return Horse;

  })(Animal);

  sam = new Snake("Sammy the Python");

  tom = new Horse("Tommy the Palomino");

  sam.move();

  tom.move();

  String.prototype.dasherize = function() {
    return this.replace(/_/g, "-");
  };

  theBait = 1000;

  theSwitch = 0;

  ref3 = [theSwitch, theBait], theBait = ref3[0], theSwitch = ref3[1];

  weatherReport = function(location) {
    return [location, 72, "Mostly Sunny"];
  };

  ref4 = weatherReport("Berkeley, CA"), city = ref4[0], temp = ref4[1], forecast = ref4[2];

  futurists = {
    sculptor: "Umberto Boccioni",
    painter: "Vladimir Burliuk",
    poet: {
      name: "F.T. Marinetti",
      address: ["Via Roma 42R", "Bellagio, Italy 22021"]
    }
  };

  ref5 = futurists.poet, name = ref5.name, (ref6 = ref5.address, street = ref6[0], city = ref6[1]);

  tag = "<impossible>";

  ref7 = tag.split(""), open = ref7[0], contents = 3 <= ref7.length ? slice.call(ref7, 1, n = ref7.length - 1) : (n = 1, []), close = ref7[n++];

  text = "Every literary critic believes he will outwit history and have the last word";

  ref8 = text.split(" "), first = ref8[0], last = ref8[ref8.length - 1];

  Person = (function() {
    function Person(options) {
      this.name = options.name, this.age = options.age, this.height = options.height;
    }

    return Person;

  })();

  tim = new Person({
    age: 4
  });

  Account = function(customer, cart) {
    this.customer = customer;
    this.cart = cart;
    return $('.shopping_cart').bind('click', (function(_this) {
      return function(event) {
        return _this.customer.purchase(_this.cart);
      };
    })(this));
  };

  hi = function() {
  return [document.title, "Hello JavaScript"].join(": ");
};

  switch (day) {
    case "Mon":
      go(work);
      break;
    case "Tue":
      go(relax);
      break;
    case "Thu":
      go(iceFishing);
      break;
    case "Fri":
    case "Sat":
      if (day === bingoDay) {
        go(bingo);
        go(dancing);
      }
      break;
    case "Sun":
      go(church);
      break;
    default:
      go(work);
  }

  score = 76;

  grade = (function() {
    switch (false) {
      case !(score < 60):
        return 'F';
      case !(score < 70):
        return 'D';
      case !(score < 80):
        return 'C';
      case !(score < 90):
        return 'B';
      default:
        return 'A';
    }
  })();

  try {
    allHellBreaksLoose();
    catsAndDogsLivingTogether();
  } catch (_error) {
    error = _error;
    print(error);
  } finally {
    cleanUp();
  }

  cholesterol = 127;

  healthy = (200 > cholesterol && cholesterol > 60);

  author = "Wittgenstein";

  quote = "A picture is a fact. -- " + author;

  sentence = (22 / 7) + " is a decent approximation of π";

  mobyDick = "Call me Ishmael. Some years ago -- never mind how long precisely -- having little or no money in my purse, and nothing particular to interest me on shore, I thought I would sail about a little and see the watery part of the world...";

  html = "<strong>\n  cup of coffeescript\n</strong>";


  /*
  SkinnyMochaHalfCaffScript Compiler v1.0
  Released under the MIT License
   */

  OPERATOR = /^(?:[-=]>|[-+*\/%<>&|^!?=]=|>>>=?|([-+:])\1|([&|<>])\2=?|\?\.|\.{2,3})/;

  fs = require('fs');

  option('-o', '--output [DIR]', 'directory for compiled code');

  task('build:parser', 'rebuild the Jison parser', function(options) {
    var code, dir;
    require('jison');
    code = require('./lib/grammar').parser.generate();
    dir = options.output || 'lib';
    return fs.writeFile(dir + "/parser.js", code);
  });

}).call(this);
